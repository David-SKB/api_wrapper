{"ast":null,"code":"import axios from 'axios';\n\n// Async function to retrieve data from fastAPI app\nexport async function getUser(userId) {\n  console.log(\"[US] [GET] START\");\n  let response = await axios.get('http://localhost:8000/user', {\n    params: {\n      id: userId\n    }\n  }).then(response => {\n    // Extract data from response object\n    response = response.data;\n    console.log(\"[US] [GET] RESPONSE DATA: \" + response);\n    return response;\n  }).catch(function (err) {\n    console.log(\"[US] [GET] ERROR: \" + err);\n    return err;\n  });\n  return response;\n}","map":{"version":3,"names":["axios","getUser","userId","console","log","response","get","params","id","then","data","catch","err"],"sources":["C:/Users/David/Documents/PROJECT BELCAVE/Mini_Projects/api_wrapper/frontend/src/api/UserAPI.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Async function to retrieve data from fastAPI app\r\nexport async function getUser(userId) {\r\n\r\n    console.log(\"[US] [GET] START\");\r\n    let response = await axios.get('http://localhost:8000/user', {\r\n        params: {\r\n            id: userId\r\n        }\r\n    }).then((response) => {\r\n        // Extract data from response object\r\n        response = response.data\r\n        console.log(\"[US] [GET] RESPONSE DATA: \" + response);\r\n        return response;\r\n    }\r\n    ).catch(function(err) {\r\n       console.log(\"[US] [GET] ERROR: \" + err); \r\n       return err;\r\n    });\r\n      return response; \r\n}"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,OAAO,eAAeC,OAAO,CAACC,MAAM,EAAE;EAElCC,OAAO,CAACC,GAAG,CAAC,kBAAkB,CAAC;EAC/B,IAAIC,QAAQ,GAAG,MAAML,KAAK,CAACM,GAAG,CAAC,4BAA4B,EAAE;IACzDC,MAAM,EAAE;MACJC,EAAE,EAAEN;IACR;EACJ,CAAC,CAAC,CAACO,IAAI,CAAEJ,QAAQ,IAAK;IAClB;IACAA,QAAQ,GAAGA,QAAQ,CAACK,IAAI;IACxBP,OAAO,CAACC,GAAG,CAAC,4BAA4B,GAAGC,QAAQ,CAAC;IACpD,OAAOA,QAAQ;EACnB,CAAC,CACA,CAACM,KAAK,CAAC,UAASC,GAAG,EAAE;IACnBT,OAAO,CAACC,GAAG,CAAC,oBAAoB,GAAGQ,GAAG,CAAC;IACvC,OAAOA,GAAG;EACb,CAAC,CAAC;EACA,OAAOP,QAAQ;AACrB"},"metadata":{},"sourceType":"module","externalDependencies":[]}